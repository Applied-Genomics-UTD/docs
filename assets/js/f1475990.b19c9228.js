"use strict";(self.webpackChunkapplied_genomics=self.webpackChunkapplied_genomics||[]).push([[5562],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),f=a,d=m["".concat(s,".").concat(f)]||m[f]||u[f]||o;return t?r.createElement(d,i(i({ref:n},c),{},{components:t})):r.createElement(d,i({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2068:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return p}});var r=t(3117),a=(t(7294),t(3905));const o={id:"nextflow",title:"Nextflow",description:"Data-driven computational pipelines",sidebar_label:"Nextflow",sidebar_position:2},i=void 0,l={unversionedId:"chip-seq/nextflow",id:"chip-seq/nextflow",title:"Nextflow",description:"Data-driven computational pipelines",source:"@site/docs/chip-seq/nextflow.md",sourceDirName:"chip-seq",slug:"/chip-seq/nextflow",permalink:"/Applied-Genomics/docs/chip-seq/nextflow",draft:!1,editUrl:"https://github.com/Functional-Genomics-Lab/Applied-Genomics/edit/main/docs/chip-seq/nextflow.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"nextflow",title:"Nextflow",description:"Data-driven computational pipelines",sidebar_label:"Nextflow",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Biostars",permalink:"/Applied-Genomics/docs/chip-seq/biostars"},next:{title:"nf-core",permalink:"/Applied-Genomics/docs/chip-seq/nf-core"}},s={},p=[{value:"Workflow managers",id:"workflow-managers",level:2},{value:"What is Nextflow?",id:"what-is-nextflow",level:2},{value:"Subworkflows",id:"subworkflows",level:2},{value:"Modules",id:"modules",level:2}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"workflow-managers"},"Workflow managers"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Makefile")," has been getting a little scary. It's great for one off commands\nfor a project, but not so much for full blown data pipelines. There are plenty\nof more modern alternatives."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.commonwl.org/user_guide/index.html"},"CWL")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/openwdl/wdl"},"WDL")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://snakemake.readthedocs.io/en/stable/"},"Snakemake")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.nextflow.io/"},"Nextflow"))),(0,a.kt)("h2",{id:"what-is-nextflow"},"What is Nextflow?"),(0,a.kt)("p",null,"Nextflow is an incredibly powerful and flexible workflow language. It's mainly\nused for bioinformatics analysis."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-groovy",metastring:'title="main.nf"',title:'"main.nf"'},'/*\n * Default pipeline parameters. They can be overriden on the command line eg.\n * given `params.foo` specify on the run command line `--foo some_value`.\n */\n\nparams.reads = "$baseDir/data/ggal/*_{1,2}.fq"\nparams.transcriptome = "$baseDir/data/ggal/ggal_1_48850000_49020000.Ggal71.500bpflank.fa"\nparams.outdir = "results"\nparams.multiqc = "$baseDir/multiqc"\n\nlog.info """\\\n R N A S E Q - N F   P I P E L I N E\n ===================================\n transcriptome: ${params.transcriptome}\n reads        : ${params.reads}\n outdir       : ${params.outdir}\n """\n\n// import modules\ninclude { RNASEQ } from \'./modules/rnaseq\'\ninclude { MULTIQC } from \'./modules/multiqc\'\n\n/*\n * main script flow\n */\nworkflow {\n  read_pairs_ch = channel.fromFilePairs( params.reads, checkIfExists: true )\n  RNASEQ( params.transcriptome, read_pairs_ch )\n  MULTIQC( RNASEQ.out, params.multiqc )\n}\n\n/*\n * completion handler\n */\nworkflow.onComplete {\n    log.info ( workflow.success ? "\\nDone! Open the following report in your browser --\x3e $params.outdir/multiqc_report.html\\n" : "Oops .. something went wrong" )\n}\n')),(0,a.kt)("p",null,"The thing that sets Nextflow apart is that it ",(0,a.kt)("em",{parentName:"p"},"pushes")," the data through the\npipeline, rather than ",(0,a.kt)("em",{parentName:"p"},"pulling")," it through like make."),(0,a.kt)("h2",{id:"subworkflows"},"Subworkflows"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-groovy",metastring:'title="./modules/rnaseq.nf"',title:'"./modules/rnaseq.nf"'},"params.outdir = 'results'\n\ninclude { INDEX } from './index'\ninclude { QUANT } from './quant'\ninclude { FASTQC } from './fastqc'\n\nworkflow RNASEQ {\n  take:\n    transcriptome\n    read_pairs_ch\n\n  main:\n    INDEX(transcriptome)\n    FASTQC(read_pairs_ch)\n    QUANT(INDEX.out, read_pairs_ch)\n\n  emit:\n     QUANT.out | concat(FASTQC.out) | collect\n}\n")),(0,a.kt)("h2",{id:"modules"},"Modules"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-groovy",metastring:'title="./modules/index.nf"',title:'"./modules/index.nf"'},'process INDEX {\n    tag "$transcriptome.simpleName"\n\n    input:\n    path transcriptome\n\n    output:\n    path \'index\'\n\n    script:\n    """\n    salmon index --threads $task.cpus -t $transcriptome -i index\n    """\n}\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/nextflow-io/rnaseq-nf"},"The full nextflow/rnaseq-nf example repo")))}u.isMDXComponent=!0}}]);