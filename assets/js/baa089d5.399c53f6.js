(self.webpackChunkapplied_genomics=self.webpackChunkapplied_genomics||[]).push([[871],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=m(n),d=r,k=u["".concat(s,".").concat(d)]||u[d]||c[d]||i;return n?a.createElement(k,o(o({ref:t},p),{},{components:n})):a.createElement(k,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var m=2;m<i;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4152:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),o={id:"make",title:"Make",description:"How to use make",sidebar_label:"Make",sidebar_position:2},l={unversionedId:"week_02/make",id:"week_02/make",isDocsHomePage:!1,title:"Build Systems",description:"How to use make",source:"@site/docs/week_02/make.md",sourceDirName:"week_02",slug:"/week_02/make",permalink:"/Applied-Genomics/docs/week_02/make",editUrl:"https://github.com/Functional-Genomics-Lab/Applied-Genomics/edit/main/docs/week_02/make.md",version:"current",sidebar_label:"Make",sidebarPosition:2,frontMatter:{id:"make",title:"Make",description:"How to use make",sidebar_label:"Make",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Version Control Systems",permalink:"/Applied-Genomics/docs/week_02/git"},next:{title:"Documentation",permalink:"/Applied-Genomics/docs/week_02/documentation"}},s=[{value:"Intro to Make",id:"intro-to-make",children:[{value:"How does it work?",id:"how-does-it-work",children:[]},{value:"Let&#39;s commit the changes!",id:"lets-commit-the-changes",children:[]}]}],m={toc:s};function p(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Codebases for scientific projects are usually on the smaller end of the\nspectrum. They also usually have small development teams. Because they have\nsmall teams they have a low ",(0,i.kt)("a",{parentName:"p",href:"https://www.wikipedia.org/wiki/Bus_factor"},"bus\nfactor")," and that cause codebases to\nfall away quickly when core members move on."),(0,i.kt)("p",null,"So to solve this problem you could write down a bunch of shell commands used to\ninstall or run your code. Or you could just use ",(0,i.kt)("a",{parentName:"p",href:"https://www.gnu.org/software/make/"},"GNU Make")),(0,i.kt)("h2",{id:"intro-to-make"},"Intro to Make"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"make")," is a utility that allows you to declare ",(0,i.kt)("em",{parentName:"p"},"rules")," to create the\nfiles(",(0,i.kt)("em",{parentName:"p"},"targets"),") that you need."),(0,i.kt)("p",null,"Here's the rough format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-makefile"},"target ... : prerequisites ...\n        command\n        ...\n        ...\n")),(0,i.kt)("p",null,"Here's a few example rules:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-makefile",metastring:'title="Makefile"',title:'"Makefile"'},"# A rule - this rule will only run if file0.txt doesn't exist.\nfile0.txt:\n    echo \"foo\" > file0.txt\n    # Even comments in these 'recipe' sections get passed to the shell.\n    # Try `make file0.txt` or simply `make` - first rule is the default.\n\n# This rule will only run if file0.txt is newer than file1.txt.\nfile1.txt: file0.txt\n    cat file0.txt > file1.txt\n    # use the same quoting rules as in the shell.\n    @cat file0.txt >> file1.txt\n    # @ stops the command from being echoed to stdout.\n    -@echo 'hello'\n    # - means that make will keep going in the case of an error.\n    # Try `make file1.txt` on the commandline.\n\n# A rule can have multiple targets and multiple prerequisites\nfile2.txt file3.txt: file0.txt file1.txt\n    touch file2.txt\n    touch file3.txt\n\n# A phony target. Any target that isn't a file.\n# It will never be up to date so make will always try to run it.\nclean:\n    rm file*.txt\n")),(0,i.kt)("p",null,(0,i.kt)("sup",{parentName:"p",id:"fnref-1"},(0,i.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))),(0,i.kt)("p",null,"Let's throw this in a Makefile and play around with it."),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Makefiles use tabs and not spaces"))),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Try running ",(0,i.kt)("inlineCode",{parentName:"li"},"make")),(0,i.kt)("li",{parentName:"ol"},"Try running ",(0,i.kt)("inlineCode",{parentName:"li"},"make file1.txt")),(0,i.kt)("li",{parentName:"ol"},"Try running ",(0,i.kt)("inlineCode",{parentName:"li"},"make clean")),(0,i.kt)("li",{parentName:"ol"},"Try running ",(0,i.kt)("inlineCode",{parentName:"li"},"make file2.txt"))),(0,i.kt)("h3",{id:"how-does-it-work"},"How does it work?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"make")," works by reading a Makefilewhich describes:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Files to be created"),(0,i.kt)("li",{parentName:"ul"},"Their dependencies"),(0,i.kt)("li",{parentName:"ul"},"Instructions to create the specified files"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Makefiles describe a DAG of the dependencies"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Directed Acyclic Graph"),(0,i.kt)("li",{parentName:"ul"},"circular dependencies are dealt with by dropping the most recently\ndiscovered dependency and forging ahead (more later)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"make")," then works its way (using post-order traversal) up the dependency\ngraph building files until the goal file is up-to-date"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Only creates outputs whose dependencies are newer than the goal file itself")))),(0,i.kt)("p",null,(0,i.kt)("sup",{parentName:"p",id:"fnref-2"},(0,i.kt)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2"))),(0,i.kt)("h3",{id:"lets-commit-the-changes"},"Let's commit the changes!"),(0,i.kt)("h4",{id:"creating-a-branch"},"Creating a branch"),(0,i.kt)("p",null,"First, let's learn to make a branch. Here's a visual representation of branches"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://wac-cdn.atlassian.com/dam/jcr:746be214-eb99-462c-9319-04a4d2eeebfa/01.svg?cdnVersion=1629",alt:"Git branches"})),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"A branch represents an independent line of development. Branches serve as an abstraction for the edit/stage/commit process. You can think of them as a way to request a brand new working directory, staging area, and project history. New commits are recorded in the history for the current branch, which results in a fork in the history of the project. ",(0,i.kt)("sup",{parentName:"p",id:"fnref-3"},(0,i.kt)("a",{parentName:"sup",href:"#fn-3",className:"footnote-ref"},"3")))),(0,i.kt)("p",null,"There are a few ways to create a branch using VS Code. Let's use ",(0,i.kt)("inlineCode",{parentName:"p"},"Ctrl+Shift+P")," and search for ",(0,i.kt)("inlineCode",{parentName:"p"},"Git: Create Branch from"),". Then use the name ",(0,i.kt)("inlineCode",{parentName:"p"},"make")," and then select ",(0,i.kt)("inlineCode",{parentName:"p"},"head")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"master"),"."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Ctrl+Shift+P")),(0,i.kt)("li",{parentName:"ol"},"Search for ",(0,i.kt)("inlineCode",{parentName:"li"},"Git: Create Branch from"),"."),(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"make")," for the name of the branch."),(0,i.kt)("li",{parentName:"ol"},"Create the branch from ",(0,i.kt)("inlineCode",{parentName:"li"},"master"),".")),(0,i.kt)("h4",{id:"gitignore"},".gitignore"),(0,i.kt)("p",null,"But we have a bunch of ",(0,i.kt)("em",{parentName:"p"},"build artifacts")," in our directory. These\nshouldn't be added to the git repo, because they aren't code(A source of truth),\nthey're something the code creates(A ",(0,i.kt)("em",{parentName:"p"},"side effect"),")."),(0,i.kt)("p",null,"You might notice that git picked up all of the txt files. A special file called\n",(0,i.kt)("inlineCode",{parentName:"p"},".gitignore")," will tell git to ignore them and avoid tracking their history. Create it and throw the following the file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gitignore",metastring:'title=".gitignore"',title:'".gitignore"'},"file*.txt\n")),(0,i.kt)("h4",{id:"commit"},"Commit"),(0,i.kt)("p",null,"Now let's commit it. Same thing as before, refer to ",(0,i.kt)("a",{parentName:"p",href:"./git#first-commit"},"The git first commit\nsection")," if you need a refresher!"),(0,i.kt)("h1",{id:"further-reading"},"Further reading"),(0,i.kt)("div",{className:"footnotes"},(0,i.kt)("hr",{parentName:"div"}),(0,i.kt)("ol",{parentName:"div"},(0,i.kt)("li",{parentName:"ol",id:"fn-1"},(0,i.kt)("a",{parentName:"li",href:"https://learnxinyminutes.com/docs/make/"},"Learn X in Y minutes where X=make"),(0,i.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")),(0,i.kt)("li",{parentName:"ol",id:"fn-2"},"UTD HPC Course Lecture 08",(0,i.kt)("a",{parentName:"li",href:"#fnref-2",className:"footnote-backref"},"\u21a9")),(0,i.kt)("li",{parentName:"ol",id:"fn-3"},(0,i.kt)("a",{parentName:"li",href:"https://www.atlassian.com/git/tutorials/using-branches"},"Atlassian Git Branch Tutorial"),(0,i.kt)("a",{parentName:"li",href:"#fnref-3",className:"footnote-backref"},"\u21a9")))))}p.isMDXComponent=!0}}]);