(self.webpackChunkapplied_genomics=self.webpackChunkapplied_genomics||[]).push([[172],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return f}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),f=r,d=m["".concat(s,".").concat(f)]||m[f]||u[f]||o;return t?a.createElement(d,i(i({ref:n},c),{},{components:t})):a.createElement(d,i({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},726:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s},default:function(){return c}});var a=t(2122),r=t(9756),o=(t(7294),t(3905)),i={id:"nf-core",title:"nf-core",description:"A community effort to collect a curated set of analysis pipelines built using Nextflow.",sidebar_label:"nf-core",sidebar_position:2},l={unversionedId:"week_04/nf-core",id:"week_04/nf-core",isDocsHomePage:!1,title:"nf-core",description:"A community effort to collect a curated set of analysis pipelines built using Nextflow.",source:"@site/docs/week_04/nf-core.md",sourceDirName:"week_04",slug:"/week_04/nf-core",permalink:"/Applied-Genomics/docs/week_04/nf-core",editUrl:"https://github.com/Functional-Genomics-Lab/Applied-Genomics/edit/main/docs/week_04/nf-core.md",version:"current",sidebar_label:"nf-core",sidebarPosition:2,frontMatter:{id:"nf-core",title:"nf-core",description:"A community effort to collect a curated set of analysis pipelines built using Nextflow.",sidebar_label:"nf-core",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Transcriptomics",permalink:"/Applied-Genomics/docs/week_04/transcriptomics"},next:{title:"ChIP-Seq Preprocessing",permalink:"/Applied-Genomics/docs/week-6"}},s=[{value:"Workflow managers",id:"workflow-managers",children:[]},{value:"What&#39;s nextflow?",id:"whats-nextflow",children:[{value:"DSL2 makes it a lot easier to follow",id:"dsl2-makes-it-a-lot-easier-to-follow",children:[]}]},{value:"nf-core Intro",id:"nf-core-intro",children:[{value:"Testing a pipeline",id:"testing-a-pipeline",children:[]},{value:"Finding some data",id:"finding-some-data",children:[]},{value:"Running the nf-core pipeline",id:"running-the-nf-core-pipeline",children:[]}]}],p={toc:s};function c(e){var n=e.components,t=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"workflow-managers"},"Workflow managers"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Makefile")," has been getting a little scary. It's great for one off commands\nfor a project, but not so much for full blown data pipelines. There are plenty\nof more modern alternatives."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.commonwl.org/user_guide/index.html"},"CWL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/openwdl/wdl"},"WDL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://snakemake.readthedocs.io/en/stable/"},"Snakemake")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.nextflow.io/"},"Nextflow"))),(0,o.kt)("h2",{id:"whats-nextflow"},"What's nextflow?"),(0,o.kt)("p",null,"Nextflow is an incredibly powerful and flexible workflow language. It's mainly used for bioinformatics analysis."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-nextflow",metastring:'title="rnatoy.nf"',title:'"rnatoy.nf"'},'#!/usr/bin/env nextflow\n\n/*\n * Defines some parameters in order to specify the refence genomes\n * and read pairs by using the command line options\n */\nparams.reads = "$baseDir/data/ggal/*_{1,2}.fq"\nparams.annot = "$baseDir/data/ggal/ggal_1_48850000_49020000.bed.gff"\nparams.genome = "$baseDir/data/ggal/ggal_1_48850000_49020000.Ggal71.500bpflank.fa"\nparams.outdir = \'results\'\n\n/*\n * Create the `read_pairs_ch` channel that emits tuples containing three elements:\n * the pair ID, the first read-pair file and the second read-pair file\n */\nChannel\n    .fromFilePairs( params.reads )\n    .ifEmpty { error "Cannot find any reads matching: ${params.reads}" }\n    .set { read_pairs_ch }\n\n/*\n * Step 1. Builds the genome index required by the mapping process\n */\nprocess buildIndex {\n    tag "$genome.baseName"\n\n    input:\n    path genome from params.genome\n\n    output:\n    path \'genome.index*\' into index_ch\n\n    """\n    bowtie2-build --threads ${task.cpus} ${genome} genome.index\n    """\n}\n\n/*\n * Step 2. Maps each read-pair by using Tophat2 mapper tool\n */\nprocess mapping {\n    tag "$pair_id"\n\n    input:\n    path genome from params.genome\n    path annot from params.annot\n    path index from index_ch\n    tuple val(pair_id), path(reads) from read_pairs_ch\n\n    output:\n    set pair_id, "accepted_hits.bam" into bam_ch\n\n    """\n    tophat2 -p ${task.cpus} --GTF $annot genome.index $reads\n    mv tophat_out/accepted_hits.bam .\n    """\n}\n\n/*\n * Step 3. Assembles the transcript by using the "cufflinks" tool\n */\nprocess makeTranscript {\n    tag "$pair_id"\n    publishDir params.outdir, mode: \'copy\'\n\n    input:\n    path annot from params.annot\n    tuple val(pair_id), path(bam_file) from bam_ch\n\n    output:\n    tuple val(pair_id), path(\'transcript_*.gtf\')\n\n    """\n    cufflinks --no-update-check -q -p $task.cpus -G $annot $bam_file\n    mv transcripts.gtf transcript_${pair_id}.gtf\n    """\n}\n')),(0,o.kt)("h3",{id:"dsl2-makes-it-a-lot-easier-to-follow"},"DSL2 makes it a lot easier to follow"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-nextflow"},'/*\n * Default pipeline parameters. They can be overriden on the command line eg.\n * given `params.foo` specify on the run command line `--foo some_value`.\n */\n\nparams.reads = "$baseDir/data/ggal/*_{1,2}.fq"\nparams.transcriptome = "$baseDir/data/ggal/ggal_1_48850000_49020000.Ggal71.500bpflank.fa"\nparams.outdir = "results"\nparams.multiqc = "$baseDir/multiqc"\n\nlog.info """\\\n R N A S E Q - N F   P I P E L I N E\n ===================================\n transcriptome: ${params.transcriptome}\n reads        : ${params.reads}\n outdir       : ${params.outdir}\n """\n\n// import modules\ninclude { RNASEQ } from \'./modules/rnaseq\'\ninclude { MULTIQC } from \'./modules/multiqc\'\n\n/*\n * main script flow\n */\nworkflow {\n  read_pairs_ch = channel.fromFilePairs( params.reads, checkIfExists: true )\n  RNASEQ( params.transcriptome, read_pairs_ch )\n  MULTIQC( RNASEQ.out, params.multiqc )\n}\n\n/*\n * completion handler\n */\nworkflow.onComplete {\n    log.info ( workflow.success ? "\\nDone! Open the following report in your browser --\x3e $params.outdir/multiqc_report.html\\n" : "Oops .. something went wrong" )\n}\n')),(0,o.kt)("p",null,"The thing that sets Nextflow apart is that it ",(0,o.kt)("em",{parentName:"p"},"pushes")," the data through the\npipeline, rather than ",(0,o.kt)("em",{parentName:"p"},"pulling")," it through like make."),(0,o.kt)("p",null,"We're not going to cover how to write Nextflow scripts, but if you'd like to use\nthem for your project you're welcome to learn."),(0,o.kt)("h2",{id:"nf-core-intro"},"nf-core Intro"),(0,o.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/gUM9acK25tQ",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay;\nclipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"A community effort to collect a curated set of analysis pipelines built using\nNextflow.")),(0,o.kt)("p",null,"We have the genomics core, imaging core, etc. core facilities, and nf-core!"),(0,o.kt)("p",null,"Enough talk, let's run it!"),(0,o.kt)("h3",{id:"testing-a-pipeline"},"Testing a pipeline"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://nf-co.re/usage/installation"},"nf-core installation docs")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Make a new directory in your scratch called ",(0,o.kt)("inlineCode",{parentName:"li"},"rnaseq")," and open it up."),(0,o.kt)("li",{parentName:"ol"},"Install Nextflow")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"curl -fsSL get.nextflow.io | bash\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Activate singularity")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ml load singularity\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Run")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"nextflow run nf-core/rnaseq -profile test,utd_sysbio\n")),(0,o.kt)("h3",{id:"finding-some-data"},"Finding some data"),(0,o.kt)("p",null,"There are lots of ways to shop for data."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://sra-explorer.info/"},"SRA Explorer")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},'Search "covid rnaseq"'),(0,o.kt)("li",{parentName:"ol"},"Click the check box next to the runs you want"),(0,o.kt)("li",{parentName:"ol"},'Scroll up and click "Add datasets to collection"'),(0,o.kt)("li",{parentName:"ol"},"Open up your cart."),(0,o.kt)("li",{parentName:"ol"},"Open up the bash script for downloading the fastq files")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"OR")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Click on the SRA accession number"),(0,o.kt)("li",{parentName:"ol"},"Click on the run"),(0,o.kt)("li",{parentName:"ol"},"Copy the Bioproject"),(0,o.kt)("li",{parentName:"ol"},"Open up run Selector and paste in the bioproject accession number"),(0,o.kt)("li",{parentName:"ol"},'Click on "Accession List" to download the list')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"SRR14607635\nSRR14607636\nSRR14607637\nSRR14607638\nSRR14607639\nSRR14607640\nSRR14607641\nSRR14607642\n")),(0,o.kt)("ol",{start:7},(0,o.kt)("li",{parentName:"ol"},"Move the file over to sysbio")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"scp Downloads/SRR_Acc_List.txt sysbio:/scratch/applied-genomics/cov-t-rnaseq\n")),(0,o.kt)("ol",{start:8},(0,o.kt)("li",{parentName:"ol"},"Use the nf-core/fetchngs pipeline")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"nextflow run nf-core/fetchngs --input SRR_Acc_List.txt -profile utd_sysbio\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.ncbi.nlm.nih.gov/Traces/study/?acc=PRJNA731518&o=acc_s%3Aa"},"SRA Run Selector")),(0,o.kt)("h3",{id:"running-the-nf-core-pipeline"},"Running the nf-core pipeline"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://nf-co.re/rnaseq/3.1/usage"},"Refer to the usage section of the pipeline's docs")))}c.isMDXComponent=!0}}]);